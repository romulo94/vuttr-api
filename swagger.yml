openapi: 3.0.0
servers:
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/romulo94/vuttr/1.0.0
info:
  description: This is a simple example API
  version: '1.0.0'
  title: VUTTR API
  contact:
    email: romulorocha063@gmail.com
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
tags:
  - name: welcome
    description: Welcome to API VUTTR
  - name: users
    description: Operations available to users
  - name: tools
    description: Operations available to tools
  - name: sessions
    description: Operations available to sessions
paths:
  /:
    get:
      tags:
        - welcome
      summary: root path
      operationId: rootPath
      description: Root path to welcome
      responses:
        '200':
          description: welcome
          content:
            application/json:
              example:
                message: Welcome to API VUTTR

  /users:
    post:
      tags:
        - users
      summary: add an user
      operationId: addUser
      description: Add an to the system
      responses:
        '201':
          description: user created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              example:
                id: 21
                name: 'Katy K. Kaf'
                email: 'katy@gmail.com'
        '409':
          description: email already exists
          content:
            application/json:
              example:
                error: email already exists
      requestBody:
        content:
          application/json:
            schema:
              example:
                name: 'Katy K. Kaf'
                email: 'katy@gmail.com'
                password: '123456'
        description: User item to add
  /tools:
    get:
      tags:
        - tools
      summary: list tools
      operationId: listTools
      description: |
        You can list all tools for
        available inventory in the system
      parameters:
        - in: query
          name: tag
          description: pass an optional search string for looking up tools
          required: false
          schema:
            type: string
            example: node

      responses:
        '200':
          description: search results matching criteria
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tool'
        '400':
          description: bad input parameter
    post:
      tags:
        - tools
      summary: add a tool
      operationId: addTool
      description: Add an tool to the system
      security:
        - bearerAuth: []
      responses:
        '201':
          description: tool created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tool'
              example:
                title: 'Sentry'
                link: https://sentry.io/welcome/'
                description: 'Sentry provides open-source and hosted error monitoring.'
                tags: ['node', 'erros', 'logs']
                user_id: 1
                created_at: '2019-10-09T17:19:02.448Z'
                updated_at: '2019-10-09T17:19:02.448Z'
        '400':
          description: missing token
          content:
            application/json:
              example:
                error: Token is not provided
        '401':
          description: unauthorized/token expired
          content:
            application/json:
              example:
                error: Token invalid
      requestBody:
        content:
          application/json:
            schema:
              example:
                title: 'Sentry'
                link: https://sentry.io/welcome/'
                description: 'Sentry provides open-source and hosted error monitoring.'
                tags: ['node', 'erros', 'logs']
        description: User item to add
  /tool/{id}:
    delete:
      tags:
        - tools
      summary: delete a tool
      operationId: deleteTool
      description: Delete an tool to the system
      parameters:
        - name: id
          in: path
          description: Tool ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: tool deleted.
        '404':
          description: tool not found
          content:
            application/json:
              example:
                error: Tool not found
  /session:
    get:
      tags:
        - sessions
      summary: verify token
      operationId: verifyToken
      description: |
        You can verify you token.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: verify you token is valid
          content:
            application/json:
              schema:
                example:
                  message: 'Token is valid'
        '401':
          description: bad input parameter
          content:
            application/json:
              schema:
                example:
                  message: 'Token is invalid'
    post:
      tags:
        - sessions
      summary: get a token
      operationId: sessionToken
      description: Get a token
      responses:
        '200':
          description: token is provided.
          content:
            application/json:
              example:
                user:
                  id: 21
                  name: 'Katy K. Kaf'
                token: eyJhbGciOiJIUzI1NcIsInR5cCI6IspXVCJ9.eyJpZCI6qSwiaWF0IjoxNTcwfjQxNTI4LCJleHAiOjE1ezA3Mjc5Mjh9.3JAYdZGr0FgbBg2ruRPHwrejPYgh5TmLPeiw-3rfJis
        '401':
          description: usermane/password wrong
          content:
            application/json:
              example:
                error: 'Password is wrong/User not found'
      requestBody:
        content:
          application/json:
            schema:
              example:
                name: 'Katy K. Kaf'
                email: 'katy@gmail.com'
                password: '123456'
        description: User item to add

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    User:
      type: object
      required:
        - id
        - name
        - email
        - password
      properties:
        id:
          type: integer
          example: 0
        name:
          type: string
          example: 'Katy K. Kaf'
        email:
          type: string
          example: 'katy@gmail.com'
        password:
          type: string
          format: password
          example: '123456'
        created_ad:
          type: string
          format: date
          example: '2019-10-09T17:19:02.448Z'
        updated_at:
          type: string
          format: date
          example: '2019-10-09T17:19:02.448Z'
    Tool:
      required:
        - id
        - title
        - link
        - description
        - tags
      properties:
        id:
          type: integer
          example: 0
        title:
          type: string
          example: 'Sentry'
        link:
          type: string
          example: 'https://sentry.io/welcome/'
        description:
          type: string
          example: 'Sentry provides open-source and hosted error monitoring.'
        tags:
          type: array
          example: ['node', 'erros', 'logs']
        user_id:
          type: integer
          example: 1
        created_ad:
          type: string
          format: date
          example: '2019-10-09T17:19:02.448Z'
        updated_at:
          type: string
          format: date
          example: '2019-10-09T17:19:02.448Z'
